{"version":3,"sources":["halaman/Fungsi1.js","halaman/Fungsi2.js","halaman/Kelas1.js","halaman/Kelas2.js","App.js","serviceWorker.js","index.js"],"names":["Fungsi1","props","judul","Fungsi2","subjudul","Kelas1","state","sambungan1","sambungan2","sambungan3","sambungan4","ubahDataState","bind","e","preventDefault","this","setState","href","onClick","React","Component","Kelas2","buatan","App","src","alt","width","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNAQeA,MANf,SAAiBC,GAChB,OACC,4BAAKA,EAAMC,QCKEC,EAPC,SAACF,GAChB,OACC,4BAAKA,EAAMG,W,mCC2BEC,E,kDA5Bd,WAAYJ,GAAO,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CACZC,WAAW,qBACXC,WAAW,eACXC,WAAW,cACXC,WAAW,yBAEZ,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBARJ,E,0DAWJC,GACbA,EAAEC,iBACFC,KAAKC,SAAS,CAACT,WAAY,gC,+BAEnB,IAAD,OACP,OACC,6BACA,4BAAKQ,KAAKT,MAAMC,YAChB,uBAAGU,KAAK,IAAIC,QAAS,SAACL,GAAD,OAAK,EAAKF,cAAcE,KAA7C,aAEA,4BAAKE,KAAKT,MAAME,YAChB,4BAAKO,KAAKT,MAAMG,YAChB,4BAAKM,KAAKT,MAAMI,iB,GAxBES,IAAMC,WCeZC,E,kDAdd,WAAYpB,GAAO,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CACZgB,OAAO,qCAHS,E,qDAOlB,OACC,4BAAKP,KAAKT,MAAMgB,Y,GATGF,aCoBNG,MAdf,WACE,OACC,6BACA,gCACA,kBAAC,EAAD,CAASrB,MAAM,YACd,kBAAC,EAAD,CAASE,SAAS,gCAClB,yBAAKoB,IAAI,wGAAwGC,IAAI,UAAUC,MAAM,MAAMC,OAAO,QAClJ,kBAAC,EAAD,MACA,kBAAC,EAAD,SCJgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.04f4094c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Fungsi1(props){\r\n\treturn(\r\n\t\t<h1>{props.judul}</h1>\r\n\t\t)\r\n}\r\n\r\nexport default Fungsi1;","import React from 'react';\r\n\r\nconst Fungsi2 = (props) =>{\r\n\treturn(\r\n\t\t<h3>{props.subjudul}</h3>\r\n\t\t)\r\n}\r\n\r\n\r\nexport default Fungsi2;","import React from 'react';\r\n\r\nclass Kelas1 extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tsambungan1:'Input Data Pensiun',\r\n\t\t\tsambungan2:'Cetak Hukdis',\r\n\t\t\tsambungan3:'Cetak Hukda',\r\n\t\t\tsambungan4:'Cetak Surat Pengantar'\r\n\t\t}\r\n\t\tthis.ubahDataState = this.ubahDataState.bind(this)\r\n\r\n\t}\r\n\tubahDataState(e){\r\n\t\te.preventDefault()\r\n\t\tthis.setState({sambungan1: \"Input Data Pensiun Update\"})\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t<h3>{this.state.sambungan1}</h3>\r\n\t\t\t<a href=\"/\" onClick={(e)=>this.ubahDataState(e)}>Ubah Data</a>\r\n\r\n\t\t\t<h3>{this.state.sambungan2}</h3>\r\n\t\t\t<h3>{this.state.sambungan3}</h3>\r\n\t\t\t<h3>{this.state.sambungan4}</h3>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\nexport default Kelas1;","import React, { Component } from 'react';\r\n\r\nclass Kelas2 extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tbuatan:'created by Hantri Septiania @2020'\r\n\t\t}\r\n\t}\r\n\trender(){\r\n\treturn(\r\n\t\t<h5>{this.state.buatan}</h5>\r\n\r\n\t\t)\r\n}\r\n}\r\n\r\nexport default Kelas2;","import React from 'react';\nimport './App.css';\nimport Fungsi1 from './halaman/Fungsi1';\nimport Fungsi2 from './halaman/Fungsi2';\nimport Kelas1 from './halaman/Kelas1';\nimport Kelas2 from './halaman/Kelas2';\n// import gambar from './halaman/gambar';\n\nfunction App() {\n  return (\n  \t<div>\n  \t<center>\n  \t<Fungsi1 judul=\"STASIUN\"/>\n    <Fungsi2 subjudul=\"(Sistem Pencatatan Pensiun)\"/>\n    <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcS1bDvPAhTrB_fXHO1fg5_JGN7fzJ7fKcnbFA&usqp=CAU\" alt=\"pensiun\" width=\"10%\" height=\"10%\"/>\n    <Kelas1/>\n    <Kelas2/>\n    </center>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}